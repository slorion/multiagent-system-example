# config adaptée pour 8GB de RAM, 4 cores et file I/O comparable à 1 disque 7200, avec un peu plus de connexions que strictement optimal

listen_addresses = '*'
port = 5432

# set to (core count * 2) + number of effective drive spindles
# http://postgresql.1045698.n5.nabble.com/pgbench-could-not-send-data-to-client-Broken-pipe-td2808314.html
max_connections = 16

# value = 1GB to 8GB, never higher than disk cache size
# see http://rhaas.blogspot.ca/2012/03/tuning-sharedbuffers-and-walbuffers.html
# see http://postgresql.1045698.n5.nabble.com/Why-shared-buffers-max-is-8GB-tp5797509.html
# tool to inspect buffer: http://www.postgresql.org/docs/9.1/interactive/pgbuffercache.html
shared_buffers = 2GB

 # value = OS filesystem cache size
effective_cache_size = 4GB

 # value = 5% of ram, max 1GB
maintenance_work_mem = 512MB

# value = (effective_cache_size - shared_buffers) / max_connections / 2
# should be kept low and increased on demand for client session doing lot of sorting
work_mem = 64MB

# buffer size for WAL segment (only a single segment need to be buffered at a time)
# starting with PostgreSQL 9.1, it defaults to being 1/32 of the size of shared_buffers, with an upper limit of 16MB
# overriding that limit is beneficial for large system with high I/O
# see http://rhaas.blogspot.ca/2012/03/tuning-sharedbuffers-and-walbuffers.html
#wal_buffers=64MB

# default value of 4.0 is too high for systems with lot of RAM and very good I/O
#random_page_cost=2.0

# a good starting value is number of drives in raid array
#effective_io_concurrency=8

# disabling synchronous_commit provides a large boost in how many updates can be done per second
# but last committed transaction may be lost in case of power failure, thought with no data corruption
# set to ON for client sessions writing important data with 'SET LOCAL synchronous_commit TO ON;'
synchronous_commit = off

# turning full_page_writes off enables significant reduction in IOps on the log device
# and improving response times of transactions with the reduced load on the log device
full_page_writes = off

checkpoint_segments = 32
checkpoint_completion_target = 0.9 # default=0.5
checkpoint_timeout = 15min

# NOTE: only applied for synchronous commits
# setting commit_delay is a big win for OLTP workloads since this allows multiple transactions
# to be commited together (and hence also cutting the number of IOPS to the log file system)
# at the cost of adding probably a 1ms or so to the transactions when the load is pretty light to make an impact.
# see https://blogs.oracle.com/jkshah/entry/best_practices_with_postgresql_8
commit_delay = 10 # value in ms

# written to pg_log by default, can add eventlog for windows or syslog for unix
log_destination = 'stderr'

# Enable capturing of stderr and csvlog into log files. Required to be on for csvlogs.
logging_collector = on

#directory where log files are written, can be absolute or relative to $PGDATA
#log_directory = 'pg_log'

log_min_duration_statement = 30s
log_line_prefix='%t:%r:%u@%d:[%p]: '
log_filename='postgresql-%Y-%m-%d.log'
log_truncate_on_rotation = on
log_rotation_age = 7d
log_rotation_size = 10MB # no maximum size for rotated logs
log_min_messages = notice
log_checkpoints = on
log_lock_waits = on # log lock waits >= deadlock_timeout
log_timezone = 'US/Eastern'

datestyle = 'iso, ymd'
timezone = 'US/Eastern'
lc_messages = 'French_Canada.1252'
lc_monetary = 'French_Canada.1252'
lc_numeric = 'French_Canada.1252'
lc_time = 'French_Canada.1252'	
default_text_search_config = 'pg_catalog.french'